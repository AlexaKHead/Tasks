q()
q()
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 10
'B' * 10
B <- c(A, 5, 5)
B * 2
C <- c(B, 6, 10)
C * 6
C*1
D <- c(1, 5, ,10, 15, 20)
D <- c(1, 5, 10, 15, 20)
sum(D)
mean (D)
min(D)
E <- c(6, 7, 8, 9, 10)
which(E == 8)
which(E > 8)
E[which(E>8)]
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
?rnorm
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
?sample
Sample1
Sample2
population1
boxplot(Sample1, Sample2)
individual1 <- c("B","A")
individual2 <- c("A","A")
Gam1 <- sample(individual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
newBaby
isHet <- c()
?for
()
for (i in 1:100)
{
Gam1 <- sample(individiual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
for (i in 1:100) {
Gam1 <- sample(individual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
View(MatGrandma)
View(makeFounder)
head(MatGrandma)
nrow(MatGrandma)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Alan
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
View(Focus)
View(Brenda)
View(Focus)
ToMom <- length(grep("mom", Focus)) / length(Focus)
ToMom
ToMomDad <- length(grep("grandpa_mom", Focus)) / length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus)) / length(Focus)
ToMomMom
ToMomDad
sum(ToMomMom, ToMomDad)
ToDadMom <- length(grep("grandma_dad", Focus)) / length(Focus)
ToDadDad <- length(grep("grandpa_dad", Focus)) / length(Focus)
ToDadMom
ToDadDad
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01)) / length(Focus)
ToSib
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))) / length(Focus)
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))) / length(Focus))
quantile(ManySiblings)
mean(ManySiblings)
plot(ManySiblings)
packages(swirl)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean()
my_mean(my_vector)
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(1,5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
setwd("C:/users/lexik/evolution/tasks/task_05")
getwd()
library(adegenet)
library(adegenet)
library(learnPopGen)
library(ggplot2)
library(agegenet)
install.packages("learnPopGen")
library(adegenet)
install.packages("adegenet")
install.packages("poppr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("hierfstat")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("scales")
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
lobster <- read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide <- reshape(lobster, idvar = c("ID", "Site"), timevar = "Locus", direction = "wide", sep = "")
colnames(lobster_wide) <- gsub("Genotype", "" , colnames(lobster_wide))
snpgeno <- lobster_wide[ , 3:ncol(lobster_wide)]
View(lobster)
View(lobster_wide)
View(snpgeno)
snps_to_remove <- c("25580","32362","41521","53889","65376","8953","21197","15531","22740","28357", "33066","51507","53052","53263","21880","22323","22365")
snpgeno <- snpgeno{ , !colnames(snpgeno) %in% snps_to_remove]
snpgeno <- snpgeno[ ,!colnames(snpgeno) %in% snps_to_remove]
ind <- as.character(lobster_wide$ID)
site <- as.character(lobster_wide$Site)
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- missingno(lobster_gen, type = "geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster <- mlg.id(lobster_gen)
lob_dups <- c()
x <- 1
for (i in dups_lobster){
if (length(dups_lobster[i]) > 1{
for (i in dups_lobster){
if (length(dups_lobster[i]) > 1){
lob_dups[x]
x <- x + 1
}
}
lob_Nodups <- indNames(lobster_gen)[! indNames(lobster_gen) %in% lob_dups]
lobster_gen <- lobster_gen[lob_Nodups, ]
summary(lobster_gen$pop)
View(lobster)
basic_lobster <- basic.stats(lobster_gen, diploid=TRUE)
View(basic_lobster)
Ho_lobster <- round(apply(basic_lobster$Ho, MARGIN =2, FUN = mean, na.rm = TRUE), digits =3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE, digits = 3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE), digits = 3)
He_lobster <- round(apply(basic_lobster$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE), digits = 3)
par(mar=c(4,4,1,1), las=1, mgp=c(2, 0.25, 0), tck=-0.005, cex.lab=1.25)
plot(He_lobster, Ho_lobster, xlab="expected H", ylab="observed H", pch = 21, bg="gray", xlim=c(0.32, 0.405), ylim=c(0.32, 0.405))
abline(0,1,lty=3)
abline(lm(Ho_lobster~He_lobster), lty=2, lwd=1.25, col='red')
Fis <- apply(basic_lobster$Fis, MARGIN = 2, FUN = mean, na.rm =TRUE)
lobster_gen_sub <- popsub(lobster_gen, sublist= c("Ale","Ber","Brd","Pad","Sar17","Vig"))
lobster_fst <- genet.dist(lobster_gen_sub, method = "WC84") %>% round(digits=3)
lab_order <- c("Ber","Brd","Pad","Vig","Sar17","Ale")
fst.mat <- as.matrix(lobster_fst)
fst.mat1 <- fst.mat[lab_order, ]
fst.mat2 <- fst.mat1[ , lab_order]
ind <- which(upper.tri(fst.mat2), arr.ind = TRUE)
fst.df <- data.frame(Site1 = dimnames(fst.mat2)[[2]][ind[,2]], Site2 = dimnames(fst.mat2)[[1]][ind[,1]], Fst= fst.mat2[ ind ])
fst.df$Site1 <- factor(fst.df$Site1, levels = unique(fst.df$Site1))
fst.df$Site2 <- factor(fst.df$Site2, levels = unique(fst.df$Site2))
fst.df$Fst[fst.df$Fst < 0] <-0
fst.label <- expression(italic("F")[ST])
mid <- max(fst.df$Fst) / 2
ggplot(data = fst.df, aes(x = Site1, y=Site2, fill=Fst))+
geom_tile(colour="black")+
geom_text(aes(label = Fst), color="black", size = 3)+
scale_fill_gradient2(low="blue", mid="pink", high="red", midpoint = mid, name= fst.label, limits = c(0, max(fst.df$Fst)), breaks = c(0, 0.05, 0.10, 0.15))+
scale_x_discrete(expand = c(0,0))+
scale_y_discrete(expand = c(0,0,), position = "right")+
theme(axis.text = element_text(colour="black", size=10, face="bold"),
axis.title= element_blank(),
panel.grid= element_blank(),
panel.background= element_blank(),
legend.position= "right",
legend.title = element_text(size=14, face="bold"),
legend.text = element_text(size=10)
)
ggplot(data = fst.df, aes(x = Site1, y=Site2, fill=Fst))+
geom_tile(colour="black")+
geom_text(aes(label = Fst), color="black", size = 3)+
scale_fill_gradient2(low="blue", mid="pink", high="red", midpoint = mid, name= fst.label, limits = c(0, max(fst.df$Fst)), breaks = c(0, 0.05, 0.10, 0.15))+
scale_x_discrete(expand = c(0,0))+
scale_y_discrete(expand = c(0,0), position = "right")+
theme(axis.text = element_text(colour="black", size=10, face="bold"),
axis.title= element_blank(),
panel.grid= element_blank(),
panel.background= element_blank(),
legend.position= "right",
legend.title = element_text(size=14, face="bold"),
legend.text = element_text(size=10)
)
library("learnPopGen")
coalescent.plot()
