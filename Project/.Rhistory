q()
q()
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 10
'B' * 10
B <- c(A, 5, 5)
B * 2
C <- c(B, 6, 10)
C * 6
C*1
D <- c(1, 5, ,10, 15, 20)
D <- c(1, 5, 10, 15, 20)
sum(D)
mean (D)
min(D)
E <- c(6, 7, 8, 9, 10)
which(E == 8)
which(E > 8)
E[which(E>8)]
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
?rnorm
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1, Size)
Sample2 <- sample(population2, Size)
?sample
Sample1
Sample2
population1
boxplot(Sample1, Sample2)
individual1 <- c("B","A")
individual2 <- c("A","A")
Gam1 <- sample(individual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
newBaby
isHet <- c()
?for
()
for (i in 1:100)
{
Gam1 <- sample(individiual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
for (i in 1:100) {
Gam1 <- sample(individual1, 1)
Gam2 <- sample(individual2, 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
View(MatGrandma)
View(makeFounder)
head(MatGrandma)
nrow(MatGrandma)
Alan <- makeBaby(PatGrandma, PatGrandpa)
Alan
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
View(Focus)
View(Brenda)
View(Focus)
ToMom <- length(grep("mom", Focus)) / length(Focus)
ToMom
ToMomDad <- length(grep("grandpa_mom", Focus)) / length(Focus)
ToMomMom <- length(grep("grandma_mom", Focus)) / length(Focus)
ToMomMom
ToMomDad
sum(ToMomMom, ToMomDad)
ToDadMom <- length(grep("grandma_dad", Focus)) / length(Focus)
ToDadDad <- length(grep("grandpa_dad", Focus)) / length(Focus)
ToDadMom
ToDadDad
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length(intersect(Focus, Sibling_01)) / length(Focus)
ToSib
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))) / length(Focus)
ManySiblings <- replicate(1e3, length(intersect(Focus, makeBaby(Brenda, Alan)))) / length(Focus))
quantile(ManySiblings)
mean(ManySiblings)
plot(ManySiblings)
packages(swirl)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean()
my_mean(my_vector)
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(1,5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
setwd("C:/Users/lexik/evolution/tasks/project")
getwd()
install.packages('readxl')
library("readxl")
df = read_xlsx("C:/Users/lexik/evolution/tasks/project/AllSpecimens.xlsx")
allSpecimens <- df
head(allSpecimens)
colnames(allSpecimens)
footMeans <- read.csv("FootLandmarks.SpeciesSummary.Csize.csv")
head(footMeans)
colnames(footMeans)
bodyMeasurements <- read.csv("LinMeas.SpeciesSummaries.csv")
head(bodyMeasurements)
colnames(bodyMeasurements)
microHabitats <- read.csv("Microhabitats.csv")
head(microHabitats)
colnames(microHabitats)
neoteny <- read.csv("neoteny.csv")
head(neoteny)
colnames(neoteny)
str(neoteny)
install.packages('dplyr')
library('dplyr')
alwaysNeotenic <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='2'))
normalDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='0'))
directDevelopment <- normalDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='-1'))
flexDevelop <- directDevelopment <- normalDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='1'))
install.packages("dplyr")
View(microHabitats)
microHabitats[, -8]
microHabitats2 <- microHabitats[, -8]
View(microHabitats2)
microHabitats[, -5:-8]
microHabitats[, -c(2, 3, 5:8)]
microHabitats2 <- microHabitats[, -c(2, 3, 5:8)]
nrows(microHabitats2)
nrow(microHabitats2)
View(normalDevelopment)
paste(normalDevelopment$genus, normalDevelopment$species, sep="_")
norm_Develop <- paste(normalDevelopment$genus, normalDevelopment$species, sep="_")
flex_Develop <- paste(flexDevelop$genus, flexDevelop$species, sep="_")
flex_Develop
View(microHabitats)
View(flexDevelop)
directDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='-1'))
flexDevelop <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='1'))
library('dplyr')
alwaysNeotenic <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='2'))
normalDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='0'))
directDevelopment <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='-1'))
flexDevelop <- neoteny %>% group_by(genus, species) %>% reframe(which(neotenic=='1'))
View(directDevelopment)
norm_Develop <- paste(normalDevelopment$genus, normalDevelopment$species, sep="_")
flex_Develop <- paste(flexDevelop$genus, flexDevelop$species, sep="_")
norm_Develop
flex_Develop
direct_Develop <- paste(directDevelopment$genus, directDevelopment$species, sep="_")
always_Neo <- paste(alwaysNeotenic$genus, alwaysNeotenic$species, sep="_")
always_Neo
direct_Develop
View(microHabitats)
View(microHabitats)
View(microHabitats2)
which(microHabitats2$species==norm_Develop)
microHabitats2[which(norm_Develop)]
norm_Develop
str(norm_Develop)
microHabitats2[grep1(direct_Develop, microHabitats2$M7)]
microHabitats2[grepl(direct_Develop, microHabitats2$M7)]
for(1:495){
for(i in 1:495){
microHabitats2[grepl(direct_Develop, microHabitats2$M7)]
}
warnings()
for(i in microHabitats2){
microHabitats2[grepl(direct_Develop, microHabitats2$M7)]
}
?filter()
filter(microHabitats2, species %in% norm_Develop)
rlang::last_trace()
filter(microHabitats2, Species %in% norm_Develop)
length(norm_Develop)
View(normalDevelopment)
normDevHabitat <- filter(microHabitats2, Species %in% norm_Develop)
View(normDevHabitat)
View(normalDevelopment)
flexDevHabitat <- filter(microHabitats2, Species %in% flex_Develop)
View(flexDevHabitat)
length(flex_Develop)
directDevHabitat <- filter(microHabitats2, Species %in% direct_Develop)
View(directDevHabitat)
alwaysNeoHabitat <- filter(microHabitats2, Species %in% always_Neo)
View(alwaysNeoHabitat)
View(alwaysNeoHabitat)
View(directDevHabitat)
?barplot
str(alwaysNeoHabitat)
install.packages('ggplot2')
library('ggplot2')
ggplot(c(normDevHabitat, flexDevHabitat, directDevHabitat, alwaysNeoHabitat)) + geom_bar(position="stack", stat="identity")
?as.matrix()
barplot(as.matrix(normDevHabitat, flexDevHabitat, directDevHabitat, alwaysNeoHabitat))
?melt(0)
install.packages("reshape2")
library("reshape2")
?melt()
?merge(0)
ggplot(normDevHabitat, flexDevHabitat, directDevHabitat, alwaysNeoHabitat) + geom_bar(position="stack", stat="identity")
rlang::last_trace()
rlang::last_trace(drope=FALSE)
rlang::last_trace(drop=FALSE)
?aes()
?left_join
normDevHabitat %>% left_join(flexDevHabitat
, by='species') %>%  left_join(directDevHabitat, by='species') %>% left_join(alwaysNeoHabitat, by='species')
normDevHabitat %>% left_join(flexDevHabitat, by='Species') %>%  left_join(directDevHabitat, by='Species') %>% left_join(alwaysNeoHabitat, by='Species')
normDevHabitat %>% left_join(flexDevHabitat, by='M7') %>%  left_join(directDevHabitat, by='M7') %>% left_join(alwaysNeoHabitat, by='M7')
